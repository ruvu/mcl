#!/usr/bin/env python
import os
import subprocess
from argparse import ArgumentParser, FileType
from copy import deepcopy
from typing import Optional

import rospy
from nav_msgs.msg import OccupancyGrid
from rosbag import Bag


class Benchmark:
    def __init__(self, bagfile, map) -> None:
        self.map = None  # type: Optional[OccupancyGrid]
        sub = rospy.Subscriber('map', OccupancyGrid, self.map_cb)
        try:
            subprocess.run(['rosrun', 'map_server', 'map_server', map.name], check=True, timeout=2)
        except subprocess.TimeoutExpired:
            pass

        print('writing the map to the bagfile')
        topic = '/map'
        with Bag(bagfile.name, 'a') as bag:

            # determine first timestamp
            for _, _, t, connection_header in bag.read_messages(topics=['/tf'], return_connection_header=True):
                break
            self.map.header.stamp = t
            connection_header = deepcopy(connection_header)
            connection_header['topic'] = topic
            connection_header['latching'] = '1'
            connection_header['type'] = self.map._type
            connection_header['md5sum'] = self.map._md5sum
            connection_header['message_definition'] = self.map._full_text
            bag.write(topic, self.map, t=t, connection_header=connection_header)
        print('OK')

    def map_cb(self, msg):
        print('received the map from the map server')
        self.map = msg


def main(bagfile, map):
    Benchmark(bagfile, map)


if __name__ == '__main__':
    rospy.init_node(os.path.basename(__file__))
    parser = ArgumentParser(description='Benchmark')
    parser.add_argument('bagfile', type=FileType('r'))
    parser.add_argument('map', type=FileType('r'))
    args = parser.parse_args()
    main(**vars(args))

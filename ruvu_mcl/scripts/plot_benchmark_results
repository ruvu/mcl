#!/usr/bin/env python
import os
from argparse import ArgumentParser, FileType, Action
from dataclasses import dataclass

import numpy as np
import rospy
from matplotlib import pyplot as plt
from rosbag import Bag
from tf.transformations import translation_matrix, quaternion_matrix, inverse_matrix, translation_from_matrix, \
    euler_matrix, euler_from_matrix
from tf2_ros import Buffer


class BagBuffer(Buffer):
    def __init__(self, bag):
        msgs = [msg for _, msg, _ in bag.read_messages(topics=['/tf'])]
        tfs = [tf for msg in msgs for tf in msg.transforms]

        ts = [tf.header.stamp for tf in tfs]

        super(BagBuffer, self).__init__(cache_time=max(ts) - min(ts), debug=False)

        # fill the buffer with all tf messages from the bagfile
        for tf in tfs:
            self.set_transform(tf, 'rosbag')


def to_matrix(transform):
    """Convert a geometry_msgs.msg.Transform to a 4d numpy transform matrix"""
    t = transform.translation
    r = transform.rotation
    t = translation_matrix((t.x, t.y, t.z))
    r = quaternion_matrix((r.x, r.y, r.z, r.w))
    return np.dot(t, r)


@dataclass
class Reference:
    ts1: rospy.Time
    ts2: rospy.Time
    delta: np.array


def read_relations(relations):
    references = []
    for line in relations:
        ts1, ts2, x, y, z, r, p, y = (float(i) for i in line.split(" "))
        ts1 = rospy.Time.from_sec(ts1)
        ts2 = rospy.Time.from_sec(ts2)
        delta = np.dot(translation_matrix((x, y, z)), euler_matrix(r, p, y))
        references.append(Reference(ts1=ts1, ts2=ts2, delta=delta))
    return references


def main(relations, bagfiles, plot):
    references = read_relations(relations)
    bagdatas = []

    for bagfile in bagfiles:
        print('processing', bagfile.name)
        with Bag(bagfile.name, 'r') as bag:
            buffer = BagBuffer(bag)

        bagdata = []
        for reference in references:
            p1 = to_matrix(buffer.lookup_transform('map', 'base_link', reference.ts1).transform)
            p2 = to_matrix(buffer.lookup_transform('map', 'base_link', reference.ts2).transform)
            delta = np.dot(inverse_matrix(p1), p2)
            bagdata.append(delta)
            # print(translation_from_matrix(reference.delta), translation_from_matrix(delta))
        bagdatas.append(bagdata)

    if plot:
        fig = plt.figure(figsize=(10, 5))

    for i, (bagdata, bagfile) in enumerate(zip(bagdatas, bagfiles)):
        reference_translation = np.array([translation_from_matrix(r.delta) for r in references])
        reference_rotation = np.array([euler_from_matrix(r.delta)[2] for r in references])

        bagdata_translation = np.array([translation_from_matrix(d) for d in bagdata])
        bagdata_rotation = np.array([euler_from_matrix(d)[2] for d in bagdata])

        translation_err = np.linalg.norm(reference_translation, axis=1) - np.linalg.norm(bagdata_translation, axis=1)
        translation_err = np.abs(translation_err)

        rotation_err = reference_rotation - bagdata_rotation
        rotation_err = (rotation_err + np.pi) % (2 * np.pi) - np.pi  # normalize angle
        rotation_err = np.abs(rotation_err)
        rotation_err = np.degrees(rotation_err)

        print(f'{bagfile.name} translation_err={np.average(translation_err)} rotation_err={np.average(rotation_err)}')

        if plot:
            ax = fig.add_subplot(len(bagdatas), 2, i * 2 + 1)
            ax.plot(translation_err, '.')
            ax.plot([np.mean(translation_err)] * len(translation_err), label='Mean', linestyle='--')
            ax.set_ylim(ymin=0, ymax=2)
            ax.set_title(bagfile.name)
            ax.set_ylabel('absolute translational error [m]')

            ax = fig.add_subplot(len(bagdatas), 2, i * 2 + 2)
            ax.plot(rotation_err, '.')
            ax.plot([np.mean(rotation_err)] * len(rotation_err), label='Mean', linestyle='--')
            ax.set_ylim(ymin=0, ymax=20)
            ax.set_title(bagfile.name)
            ax.set_ylabel('absolute angular error [deg]')

    plt.show()


class BooleanOptionalAction(Action):
    """Backport of BooleanOptionalAction"""

    def __init__(self,
                 option_strings,
                 dest,
                 default=None,
                 type=None,
                 choices=None,
                 required=False,
                 help=None,
                 metavar=None):

        _option_strings = []
        for option_string in option_strings:
            _option_strings.append(option_string)

            if option_string.startswith('--'):
                option_string = '--no-' + option_string[2:]
                _option_strings.append(option_string)

        if help is not None and default is not None:
            help += f" (default: {default})"

        super().__init__(
            option_strings=_option_strings,
            dest=dest,
            nargs=0,
            default=default,
            type=type,
            choices=choices,
            required=required,
            help=help,
            metavar=metavar)

    def __call__(self, parser, namespace, values, option_string=None):
        if option_string in self.option_strings:
            setattr(namespace, self.dest, not option_string.startswith('--no-'))

    def format_usage(self):
        return ' | '.join(self.option_strings)


if __name__ == '__main__':
    rospy.init_node(os.path.basename(__file__))
    parser = ArgumentParser(description='Benchmark')
    parser.add_argument('relations', type=FileType('r'))
    parser.add_argument('bagfiles', type=FileType('r'), nargs='+')
    parser.add_argument('--plot', action=BooleanOptionalAction, default=True)

    args = parser.parse_args()
    main(**vars(args))

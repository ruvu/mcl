#!/usr/bin/env python

# Copyright 2021 RUVU Robotics B.V.

from math import pi
from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, int_t, double_t, str_t, bool_t

PACKAGE = 'ruvu_mcl'

gen = ParameterGenerator()

gen.add("min_particles", int_t, 0, "Minimum allowed number of particles.", 100, 0, 1000)
gen.add("max_particles", int_t, 0, "Mamimum allowed number of particles.", 5000, 0, 10000)

gen.add("kld_err",  double_t, 0, "Maximum error between the true distribution and the estimated distribution.", .01, 0, 1)
gen.add("kld_z", double_t, 0, "Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.", .99, 0, 1)

gen.add("update_min_d", double_t, 0, "Translational movement required before performing a filter update.", .2, 0, 5)
gen.add("update_min_a", double_t, 0, "Rotational movement required before performing a filter update.", pi/6, 0, 2*pi)

gen.add("resample_interval", int_t, 0, "Number of filter updates required before resampling.", 2, 0, 20)
gen.add("selective_resampling", bool_t, 0, "Enable selective resampling", False)

gen.add("transform_tolerance", double_t, 0, "Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.", .1, 0, 2)

gen.add("tf_broadcast", bool_t, 0, "When true (the default), publish results via TF.  When false, do not.", True)
gen.add("initial_pose_x", double_t, 0, "", 0.0)
gen.add("initial_pose_y", double_t, 0, "", 0.0)
gen.add("initial_pose_a", double_t, 0, "", 0.0, 0.0, 2 * pi)
gen.add("initial_cov_xx", double_t, 0, "", 0.5 ** 2, 0)
gen.add("initial_cov_yy", double_t, 0, "", 0.5 ** 2, 0)
gen.add("initial_cov_aa", double_t, 0, "", (pi / 12.0) ** 2, 0, (2 * pi) ** 2)

gen.add("laser_max_beams", int_t, 0, "How many evenly-spaced beams in each scan to be used when updating the filter.", 30, 0, 250)

gen.add("laser_z_hit", double_t, 0, "Mixture weight for the z_hit part of the model.", .95, 0, 1)
gen.add("laser_z_short", double_t, 0, "Mixture weight for the z_short part of the model.", .1, 0, 1)
gen.add("laser_z_max", double_t, 0, "Mixture weight for the z_max part of the model.", .05, 0, 1)
gen.add("laser_z_rand", double_t, 0, "Mixture weight for the z_rand part of the model.", .05, 0, 1)

gen.add("laser_sigma_hit", double_t, 0, "Standard deviation for Gaussian model used in z_hit part of the model.", .2, 0, 10)
gen.add("laser_lambda_short", double_t, 0, "Exponential decay parameter for z_short part of model.", .1, 0, 10)
gen.add("laser_likelihood_max_dist", double_t, 0, "Maximum distance to do obstacle inflation on map, for use in likelihood_field model.", 2, 0, 20)

lmt = gen.enum([gen.const("beam_const", str_t, "beam", "Use beam laser model"), gen.const("likelihood_field_const", str_t, "likelihood_field", "Use likelihood_field laser model"), gen.const("likelihood_field_prob", str_t, "likelihood_field_prob", "Use likelihood_field_prob laser model")], "Laser Models")
gen.add("laser_model_type", str_t, 0, "Which model to use, either beam, likelihood_field or likelihood_field_prob.", "likelihood_field", edit_method=lmt)

# Landmark Model Parameters
lamt = gen.enum([gen.const("landmark_gaussian_const", str_t, "gaussian", "Use gaussian landmark model"), gen.const("landmark_likelihood_field_const", str_t, "likelihood_field", "Use likelihood_field landmark model")], "Landmark Models")
gen.add("landmark_model_type", str_t, 0, "Which model to use, either gaussian or likelihood_field.", "gaussian", edit_method=lamt)

gen.add("landmark_z_rand", double_t, 0, "Mixture weight for the z_rand part of the model.", .05, 0, 1)
gen.add("landmark_sigma_hit", double_t, 0, "Standard deviation for Gaussian model used in z_hit part of the model.", .2, 0, 10)

gen.add("landmark_sigma_r", double_t, 0, "Standard deviation for Gaussian model used in radial part of the model.", .2, 0, 10)
gen.add("landmark_sigma_t", double_t, 0, "Standard deviation for Gaussian model used in angle part of the model.", .2, 0, 10)
gen.add("landmark_max_r_confidence", double_t, 0, "Landmarks that are outside of this confidence interval are not evaluated.", .99, 0, 1)

# Odometry Model Parameters
odt = gen.enum([gen.const("diff_const", str_t, "diff", "Use diff odom model"),
                gen.const("omni_const", str_t, "omni", "Use omni odom model"),
                gen.const("diff_corrected_const", str_t, "diff-corrected", "Use corrected diff odom model"),
                gen.const("omni_corrected_const", str_t, "omni-corrected", "Use corrected omni odom model")],
               "Odom Models")
gen.add("odom_model_type", str_t, 0, "Which model to use, diff, omni, diff-corrected, or omni-corrected", "diff", edit_method=odt)

gen.add("odom_alpha1", double_t, 0, "Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha2", double_t, 0, "Specifies the expected noise in odometry's rotation estimate from the translational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha3", double_t, 0, "Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha4", double_t, 0, "Specifies the expected noise in odometry's translation  estimate from the rotational component of the robot's motion.", .2, 0, 10)
gen.add("odom_alpha5", double_t, 0, "Translation-related noise parameter (only used if model is omni).", .2, 0, 10)

gen.add("odom_frame_id", str_t, 0, "Which frame to use for odometry.", "odom")
gen.add("base_frame_id", str_t, 0, "Which frame to use for the robot base.", "base_link")
gen.add("global_frame_id", str_t, 0, "The name of the coordinate frame published by the localization system.", "map")

# Ruvu mcl parameters:
at = gen.enum([gen.const("none", str_t, "none", "Use a fixed number of particles"),
               gen.const("split_and_merge", str_t, "split-and-merge", "Use split and merge technique to control the number of particles"),
               gen.const("kld_sampling", str_t, "kld-sampling", "Use KLD sampling to control the number of particles")],
              "Adaptive particle size techniques")
gen.add("adaptive_type", str_t, 0, "Which adaptive technique to use", "none", edit_method=at)
gen.add("xy_grid_size", double_t, 0, "Grid size in x and y to discretize particles into clusters for merging.", 0.03, 0, 1)
gen.add("theta_grid_size", double_t, 0, "Grid size in theta to discretize particles into clusters for merging.", 0.02, 0, 1)
gen.add("split_weight", double_t, 0, "Split particles with weights exceeding this value into equals.", 0.0015, 0, 1)
exit(gen.generate(PACKAGE, "node", "AMCL"))

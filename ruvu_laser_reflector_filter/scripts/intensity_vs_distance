#!/usr/bin/env python

# Copyright 2021 RUVU Robotics B.V.

import rospy
from sensor_msgs.msg import LaserScan
import matplotlib.pyplot as plt
import numpy as np


class Plotter():
    def __init__(self):
        self.ranges = []
        self.intensities = []

        # Create plot window
        self.line, = plt.plot([0], [0], 'r.')

        xs = np.linspace(0.1, 25, 100)

        ys = self._threshold(xs)
        plt.plot(xs, ys, 'b-')
        plt.ion()
        self._axes_configured = False

        self.sub = rospy.Subscriber("scan", LaserScan, self._scan_callback)
        self.pub = rospy.Publisher("scan_filtered", LaserScan)

    def _scan_callback(self, msg):
        self.ranges = msg.ranges
        self.intensities = msg.intensities

        if not self._axes_configured:
            self.line.axes.set_xlim(msg.range_min, 25)
            self.line.axes.set_ylim(0, 20000)
            self._axes_configured = True

        self._update_plot()

        out_msg = msg
        ranges = []
        for idx, (r, i) in enumerate(zip(msg.ranges, msg.intensities)):
            if i < self._threshold(r):
                ranges.append(msg.range_max + 1)
            else:
                ranges.append(msg.ranges[idx])

        out_msg.ranges = ranges

        self.pub.publish(out_msg)

    def _update_plot(self):
        self.line.set_data(self.ranges, self.intensities)
        plt.pause(0.001)

    def _threshold(self, range):
        # y = 10000 / (pow(data, 2)) + 2100
        # y = 10000 * (1 / pow(data, 1.5)) + 2000
        y = 9000 * np.exp(-0.2 * range) + 5000
        # y = 7000 * np.exp(-0.4 * data)
        # y = data/(data + 0.000000000001) * 11000
        return y


def __main__(argc, argv):
    rospy.init_node()


if __name__ == "__main__":
    rospy.init_node('intensity_vs_distance_plotter')

    plotter = Plotter()
    # rospy.spin()
    plt.ioff()
    plt.show()
